"use strict";
var core_1 = require("@angular/core");
var app_service_1 = require("../app.service");
var page_1 = require("ui/page");
var dialogs = require("ui/dialogs");
var router_1 = require("nativescript-angular/router");
var HomeComponent = (function () {
    function HomeComponent(page, routerExtensions, ngZone) {
        this.page = page;
        this.routerExtensions = routerExtensions;
        this.ngZone = ngZone;
        this.page.actionBarHidden = true;
    }
    HomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        var uid = app_service_1.AuthService.uid;
        this.user$ = app_service_1.DatabaseService.get("/users/" + uid);
        console.log("HomeComponent:uid", uid);
        this.userSubs = this.user$
            .subscribe(function (data) {
            if (data) {
                console.log("HomeComponent:user", JSON.stringify(data));
                _this.ngZone.run(function () {
                    _this.user = data;
                });
            }
        });
        this.notes$ = app_service_1.DatabaseService.queryAll('/notes', {
            orderBy: {
                type: app_service_1.DatabaseService.QueryOrderByType.CHILD,
                value: 'created_by'
            },
            range: {
                type: app_service_1.DatabaseService.QueryRangeType.EQUAL_TO,
                value: uid
            },
            limit: {
                type: app_service_1.DatabaseService.QueryLimitType.LAST,
                value: 50
            }
        });
        this.notesSubs = this.notes$
            .subscribe(function (notes) {
            notes = notes || [];
            console.log("HomeComponent:notes", JSON.stringify(notes));
            _this.ngZone.run(function () {
                _this.notes = notes;
                _this.notes = notes.sort(function (noteA, noteB) { return (noteB.created_at - noteA.created_at); });
                _this.pinnedNotes = _this.notes.filter(function (note) { return note.pinned; });
                _this.otherNotes = _this.notes.filter(function (note) { return !note.pinned; });
            });
        });
    };
    HomeComponent.prototype.ngOnDestroy = function () {
        this.userSubs.unsubscribe();
        this.notesSubs.unsubscribe();
    };
    HomeComponent.prototype.createNote = function (note) {
        app_service_1.DatabaseService.create('/notes', note);
    };
    HomeComponent.prototype.isPinNotes = function () {
        return this.pinnedNotes.length > 0;
    };
    HomeComponent.prototype.pinNote = function (note) {
        console.log("pinNote", note);
        var noteId = note.$id;
        app_service_1.DatabaseService.update("notes/" + noteId, { pinned: true });
    };
    HomeComponent.prototype.unPinNote = function (note) {
        console.log("unPinNote", note);
        var noteId = note.$id;
        app_service_1.DatabaseService.update("notes/" + noteId, { pinned: false });
    };
    HomeComponent.prototype.onIndexChange = function (index) {
        console.log(index);
    };
    HomeComponent.prototype.onProfile = function () {
        var _this = this;
        dialogs.action("Options", "Cancel", ["Logout"])
            .then(function (result) {
            if (result === "Logout") {
                _this.logout();
            }
            console.log("dialog:result " + result);
        });
    };
    HomeComponent.prototype.logout = function () {
        var _this = this;
        app_service_1.AuthService.logout()
            .then(function (_) {
            _this.routerExtensions.navigate(['/login'], { clearHistory: true });
        });
    };
    return HomeComponent;
}());
HomeComponent = __decorate([
    core_1.Component({
        selector: "ns-home",
        moduleId: module.id,
        styleUrls: ["./home.component.css"],
        templateUrl: "./home.component.html",
    }),
    __metadata("design:paramtypes", [page_1.Page, router_1.RouterExtensions, core_1.NgZone])
], HomeComponent);
exports.HomeComponent = HomeComponent;
//# sourceMappingURL=data:application/json;base64,